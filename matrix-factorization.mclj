# Document Summarization via Nonnegative Matrix Factorization

## Description of the problem

Assume we have a matrix $A$ of size $n\times m$ which consists of nonnegative entries.  We want to write $A$
as a product $A = BC$ where $B$ has size $n\times k$ and $C$ has size $k\times m$ where $k$ is much smaller
than both $n$ and $m$.  We also want $B$ and $C$ to consist nonnegative entries.

We can think of this problem as an optimization problem where the error function is 
$$ err(B,C) = \sum_{i,j,\ell} |a_{ij}-b_{i\ell}c_{\ell j}| $$
Today, I am going to implement a solution using clojure.  I am going to apply this to a problem coming from
natural language processing.

## Nonnegative Matrix Decomposition and Document Summarization

Assume we have a text, and we write a matrix $A$ whose rows are labeled with the sentences appearing in the
text and whose columns are labeled with the words appearing in the text.  For a (sentence,word)-pair the
corresponding entry in the matrix is 1 if the word appears in the sentence, and the entry is 0 otherwise.
Dividing each row by the sum of the terms in that row, we convert these 1's and 0's to a probability distribution:
in the new matrix for a (sentence,word)-pair the corresponding entry is the probability that that word
appears in that sentence.

If we apply the nonnegative matrix procedure to this matrix we get two matrices $B$ and $C$ such that 
$A = BC$.  I will use the following hypothesis: a *topic* is a specific probability distribution over 
the set of all words appearing in a text.  Thus such a decomposition tries to identify k-many topics
that one can associate with the text at hand.  While $B$ measures how much of each sentence belongs to
a topic, $C$ measures the same thing for each word.

## An Implementation

I am going to re-cycle the code I wrote in my earlier posts: [one][1] for document summarization in
clojure to get the relevant matrix from a document, and [another][2] for nonnegative matrix decomposition
in clojure:

First, let us define our namespace with the necessary libraries:
``` :display :true :results :false :code
(ns summary
  (:import opennlp.tools.sentdetect.SentenceDetector
           opennlp.tools.sentdetect.SentenceDetectorME
           opennlp.tools.sentdetect.SentenceModel
           opennlp.tools.stemmer.PorterStemmer
           java.io.File)
  (:require [clojure.string :as st]
            [clojure.core.matrix :as cm]
            [clatrix.core :as cc])
  (:gen-class))
```
Now, let us write the functions that create the matrix $A$ from a given document:
``` :display :true :results :true :code
(defn bag-of-words [sentence stemmer stop-words]
   {sentence (as-> sentence $ 
                   (st/lower-case $) 
                   (st/replace $ #"[^\s\p{Isletter}]" "")
                   (st/split $ #"\s+") 
                   (filter #(not (stop-words %)) $) 
                   (map #(.stem stemmer %) $)
                   (into #{} $))})

(defn get-matrix [sentences detector stemmer stop-words]
   (let [raw (into {} (mapcat #(bag-of-words % stemmer stop-words) sentences))
         ws (->> (vals raw) (reduce concat) (into #{}) (into []))
         n (count sentences)
         m (count ws)
         A (cc/zeros m n)]
      (doseq [i (range n)]
         (doseq [w (get raw (nth sentences i))]
            (cc/set A (.indexOf ws w) i 1)))
      A))
```
For the matrix decomposition, first I need the error function and a random matrix function:
``` :display :true :results :false :code
(defn cost-fn [A B]
  (->> (cm/sub A B)
       (cm/to-vector)
       (map (fn [x] (* x x)))
       (reduce +)))

(defn random-matrix [n m]
  (as-> (repeatedly rand) $
    (take (* n m) $)
    (cm/reshape $ [n m])))
```
Now, the matrix decomposition code:
``` :display :true :results :false :code
(defn nnmd [D k cost-fn epocs tol rate]
  (let [n (cm/row-count D)
        m (cm/column-count D)
        s (* n m)]
    (loop [W (random-matrix n k)
           H (random-matrix k m)
           i epocs
           c tol]
      (if (or (= i 0) (< c tol)) 
        [W H i c]
        (let [u (cm/reshape (take s (repeat 1)) [n m])
              Wt (cm/transpose W)
              Ht (cm/transpose H)
              et (cm/mul rate (cm/div W (cm/mmul u Ht)))
              mu (cm/mul rate (cm/div H (cm/mmul Wt u)))
              temp (cm/sub (cm/div D (cm/mmul W H)) u)]
          (recur (cm/add W (cm/mul et (cm/mmul temp Ht)))
                 (cm/add H (cm/mul mu (cm/mmul Wt temp)))
                 (dec i)
                 (/ (cost-fn D (cm/mmul W H)) s)))))))
```
So, let us test:
```:display :true :results nil :code
(def summary
   (let [sd (SentenceDetectorME. (SentenceModel. (File. "resources/en-sent.bin")))
         stemmer (PorterStemmer.)
         sentences (->> (slurp "data/textc") (.sentDetect sd) (into []))
         stop-words (as-> (slurp "resources/remove-en") $
                          (st/replace $ #"\p{IsPunctuation}" "")
                          (st/split $ #"\s+")
                          (into #{} $))
         matrix (get-matrix sentences sd stemmer stop-words)
         [W H i c] (cc/t (nnmd matrix 3 cost-fn 2000 1e-2 1e-2))
         weights (cc/matrix W)]
       (map (fn [s w] {:sentence s :weight w}) sentences weights)))
```

``` :display nil :results nil :code
  (println "\n|Topic 1|Topic 2|Topic 3|Sentence|\n|:---|:---|:---|:-------------------------|")
  (doseq [x summary]
     (println (format "|%4.2f|%4.2f|%4.2f|\t%s|" (nth (x :weight) 0) (nth (x :weight) 1) (nth (x :weight) 2) (x :sentence))))
```
